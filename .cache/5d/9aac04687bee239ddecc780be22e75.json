{"id":"Functions/loadChunks.js","dependencies":[{"name":"C:\\Users\\welis\\OneDrive\\Documentos\\Projetos\\Phaser\\testEnv_phaser\\package.json","includedInParent":true,"mtime":1717997852688}],"generated":{"js":"// import { l1Map_height, l1Map_width } from '../Consts/Sizes'\n// import { loadChunk } from './loadChunk'\n\n// const chunk_size = 32\n// const tile_size  = 16\n\n// const loadedChunks = new Set()\n// const arrayChunks = new Array()\n// let aux2 = 0\n// let aux1 = 0\n// for(let x = 0; x < l1Map_width / 16; x += 32){\n//     aux2 = 0\n//     for(let y = 0; y < l1Map_height / 16; y += 32){\n//         arrayChunks.push([aux1,aux2])\n//         aux2++\n//         }\n//     aux1++\n// }\n\n// function loadChunks(playerX, playerY, session, objConfigTileSetImage, objConfigLayersID, context){\n//     let chunkX = Math.floor( playerX / chunk_size * tile_size) \n//     let chunkY = Math.floor( playerY / chunk_size * tile_size)\n//     let index = 0\n\n//     for(let x = chunkX - 1; x <= chunkX + 1; x++) {\n//         for(let y = chunkY - 1; y <= chunkY + 1; y++){\n//             const chunkKey = `${x},${y}`\n//             if(!loadedChunks.has(chunkKey)){\n//                 loadChunk(x, y, session, objConfigTileSetImage, objConfigLayersID, context, arrayChunks[index])\n//                 loadedChunks.add(chunkKey)\n//             }\n//             index++\n//         }\n//     }\n//     index = 0\n// }\n\n// export{\n//     chunk_size,\n//     tile_size,\n//     loadChunks\n// }"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"Functions/loadChunks.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"Functions/loadChunks.js","original":{"line":2,"column":0}},{"generated":{"line":4,"column":0},"source":"Functions/loadChunks.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"Functions/loadChunks.js","original":{"line":5,"column":0}},{"generated":{"line":7,"column":0},"source":"Functions/loadChunks.js","original":{"line":7,"column":0}},{"generated":{"line":8,"column":0},"source":"Functions/loadChunks.js","original":{"line":8,"column":0}},{"generated":{"line":9,"column":0},"source":"Functions/loadChunks.js","original":{"line":9,"column":0}},{"generated":{"line":10,"column":0},"source":"Functions/loadChunks.js","original":{"line":10,"column":0}},{"generated":{"line":11,"column":0},"source":"Functions/loadChunks.js","original":{"line":11,"column":0}},{"generated":{"line":12,"column":0},"source":"Functions/loadChunks.js","original":{"line":12,"column":0}},{"generated":{"line":13,"column":0},"source":"Functions/loadChunks.js","original":{"line":13,"column":0}},{"generated":{"line":14,"column":0},"source":"Functions/loadChunks.js","original":{"line":14,"column":0}},{"generated":{"line":15,"column":0},"source":"Functions/loadChunks.js","original":{"line":15,"column":0}},{"generated":{"line":16,"column":0},"source":"Functions/loadChunks.js","original":{"line":16,"column":0}},{"generated":{"line":17,"column":0},"source":"Functions/loadChunks.js","original":{"line":17,"column":0}},{"generated":{"line":18,"column":0},"source":"Functions/loadChunks.js","original":{"line":18,"column":0}},{"generated":{"line":20,"column":0},"source":"Functions/loadChunks.js","original":{"line":20,"column":0}},{"generated":{"line":21,"column":0},"source":"Functions/loadChunks.js","original":{"line":21,"column":0}},{"generated":{"line":22,"column":0},"source":"Functions/loadChunks.js","original":{"line":22,"column":0}},{"generated":{"line":23,"column":0},"source":"Functions/loadChunks.js","original":{"line":23,"column":0}},{"generated":{"line":25,"column":0},"source":"Functions/loadChunks.js","original":{"line":26,"column":0}},{"generated":{"line":26,"column":0},"source":"Functions/loadChunks.js","original":{"line":27,"column":0}},{"generated":{"line":27,"column":0},"source":"Functions/loadChunks.js","original":{"line":28,"column":0}},{"generated":{"line":28,"column":0},"source":"Functions/loadChunks.js","original":{"line":29,"column":0}},{"generated":{"line":29,"column":0},"source":"Functions/loadChunks.js","original":{"line":30,"column":0}},{"generated":{"line":30,"column":0},"source":"Functions/loadChunks.js","original":{"line":31,"column":0}},{"generated":{"line":31,"column":0},"source":"Functions/loadChunks.js","original":{"line":32,"column":0}},{"generated":{"line":32,"column":0},"source":"Functions/loadChunks.js","original":{"line":33,"column":0}},{"generated":{"line":33,"column":0},"source":"Functions/loadChunks.js","original":{"line":34,"column":0}},{"generated":{"line":34,"column":0},"source":"Functions/loadChunks.js","original":{"line":35,"column":0}},{"generated":{"line":35,"column":0},"source":"Functions/loadChunks.js","original":{"line":36,"column":0}},{"generated":{"line":36,"column":0},"source":"Functions/loadChunks.js","original":{"line":37,"column":0}},{"generated":{"line":38,"column":0},"source":"Functions/loadChunks.js","original":{"line":41,"column":0}},{"generated":{"line":39,"column":0},"source":"Functions/loadChunks.js","original":{"line":42,"column":0}},{"generated":{"line":40,"column":0},"source":"Functions/loadChunks.js","original":{"line":43,"column":0}},{"generated":{"line":41,"column":0},"source":"Functions/loadChunks.js","original":{"line":44,"column":0}},{"generated":{"line":42,"column":0},"source":"Functions/loadChunks.js","original":{"line":45,"column":0}}],"sources":{"Functions/loadChunks.js":"// import { l1Map_height, l1Map_width } from '../Consts/Sizes'\r\n// import { loadChunk } from './loadChunk'\r\n\r\n// const chunk_size = 32\r\n// const tile_size  = 16\r\n\r\n// const loadedChunks = new Set()\r\n// const arrayChunks = new Array()\r\n// let aux2 = 0\r\n// let aux1 = 0\r\n// for(let x = 0; x < l1Map_width / 16; x += 32){\r\n//     aux2 = 0\r\n//     for(let y = 0; y < l1Map_height / 16; y += 32){\r\n//         arrayChunks.push([aux1,aux2])\r\n//         aux2++\r\n//         }\r\n//     aux1++\r\n// }\r\n\r\n// function loadChunks(playerX, playerY, session, objConfigTileSetImage, objConfigLayersID, context){\r\n//     let chunkX = Math.floor( playerX / chunk_size * tile_size) \r\n//     let chunkY = Math.floor( playerY / chunk_size * tile_size)\r\n//     let index = 0\r\n    \r\n    \r\n//     for(let x = chunkX - 1; x <= chunkX + 1; x++) {\r\n//         for(let y = chunkY - 1; y <= chunkY + 1; y++){\r\n//             const chunkKey = `${x},${y}`\r\n//             if(!loadedChunks.has(chunkKey)){\r\n//                 loadChunk(x, y, session, objConfigTileSetImage, objConfigLayersID, context, arrayChunks[index])\r\n//                 loadedChunks.add(chunkKey)\r\n//             }\r\n//             index++\r\n//         }\r\n//     }\r\n//     index = 0\r\n// }\r\n\r\n\r\n\r\n// export{\r\n//     chunk_size,\r\n//     tile_size,\r\n//     loadChunks\r\n// }\r\n"},"lineCount":null}},"error":null,"hash":"e47745d75faaa8e704d3a7d58c3d7aea","cacheData":{"env":{}}}